import Fields
import Styles

######################################################################

TableReport:
    pt_name     =? nil
    posting     = Marty::Posting.lookup(pt_name)
    pt          = posting.created_dt
    module_name =? nil
    class_name  =? nil
    title       =? (class_name || "Table Report") + (
        if pt_name then "_" + pt_name else "")
    sort_field  =? nil

    result_raw  = Marty::DataChange.do_export(
        pt,
        if module_name then module_name + '::' + class_name else class_name,
        sort_field,
        )
    row_count   = result_raw.length
    result      = MartyDemo::Helper.to_csv(result_raw)
    form        = [
        Fields::PostingField,
        Fields::ClassField,
        ]
    format      = "csv"

#####################################################################

EnumReport:
    title   = "Bid Track Enumerations"
    format  = "csv"
    form    = []
    classes = [
        "Action",
        "CollateralType",
        "LoanSource",
        "Product",
        "Status",
        ]

    res = [
        [c] +
        Marty::DataChange.do_export('infinity', "MartyDemo::%s" % c)[1,100] +
        [""]
        for c in classes
        ].flatten(1)

    result  = res

#####################################################################

DataImportParam: Fields::CsvField
    field_label = "Import Text"
    name        = "data_import_field"
    height      =  600

ImportTypeField:
    field_label = "Import Type"
    name        = "import_type"
    xtype       = ":combo"
    store       = [imp.name for imp in Marty::ImportType.get_all].sort
    value       = store[0]

DataImportReport:
    #roles = ["price_manager", "rule_manager"]
    import_type =? nil
    title = if import_type
        then "Data Import - " + import_type
        else "Data Import Job"

    data_import_field =?

    import_type_rec = Marty::ImportType.lookup(import_type) ||
        ERR("NULL ImportType", import_type)

    result = MartyDemo::Helper.import_data(import_type_rec,
                                        data_import_field)

    form = [
        ImportTypeField,
        DataImportParam ]

    format = "csv"
